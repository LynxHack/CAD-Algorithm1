%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.1
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

systemdict /pdfmark known {
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown negative paperwidth paperheight manfeed numcopies numfonts
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
		setpapername % This stuff may alter the transfer/screen/angle
		manualfeed {true} {papersize} ifelse % true->more work to do
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/setpapername { % Already set up: paperwidth paperheight and manualfeed
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 7 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(EasyGL \050V) 72 42.62 T
(ersion 1.4\051) 107.77 42.62 T
(April 16, 1998) 282.56 42.62 T
(1 of 6) 521.34 42.62 T
1 20 Q
(EasyGL \050V) 214.5 706.67 T
(ersion 1.4\051) 308.62 706.67 T
1 16 Q
(An Easy-to-Use Graphics P) 78 679.33 T
(ackage f) 264.94 679.33 T
(or X11 and P) 320.98 679.33 T
(ostScript Displays) 410.88 679.33 T
1 12 Q
(V) 201.57 656 T
(aughn Betz \050v) 209.13 656 T
(aughn@eecg) 279.68 656 T
(.utor) 344.66 656 T
(onto.ca\051) 369.44 656 T
0 F
1.69 (Y) 72 628 P
1.69 (ou may use this graphics package freely for non-commercial purposes. F) 79.34 628 P
1.69 (or commercial use,) 444.98 628 P
(contact the author at the email address abo) 72 614 T
(v) 276.11 614 T
(e.) 281.93 614 T
1 16 Q
(Files in this Ar) 72 573.33 T
(chi) 172.61 573.33 T
(v) 192.9 573.33 T
(e:) 200.74 573.33 T
2 12 Q
(gr) 72 546 T
(aphics.c:) 82.49 546 T
0 F
(The source code for the graphics package.) 129.14 546 T
2 F
(gr) 72 520 T
(aphics.h:) 82.49 520 T
0 F
(The header \336le for the graphics package.) 129.82 520 T
2 F
(e) 72 494 T
(xample) 77.09 494 T
(.c:) 111.56 494 T
0 F
( An e) 123.89 494 T
(xample \336le sho) 149.7 494 T
(wing ho) 222.73 494 T
(w to use the graphics.) 261.43 494 T
2 F
(mak) 72 468 T
(e\336le:) 91.87 468 T
0 F
( The mak) 115.86 468 T
(e\336le for the e) 161.06 468 T
(xample program) 224.53 468 T
2 F
(manual.ps) 72 442 T
0 F
(: This document.) 121.67 442 T
1 16 Q
(General Use of this Graphics P) 72 401.33 T
(ackage) 282.94 401.33 T
0 12 Q
1.18 (An) 72 374 P
1.18 (y source \336les which use graphics must include the line #include \322graphics.h\323 and you must) 86.48 374 P
1.45 (ha) 72 360 P
1.45 (v) 83.09 360 P
1.45 (e both the graphics.c and graphics.h \336les in your source directory) 88.91 360 P
1.45 (. When you compile you) 415.89 360 P
(should use a command lik) 72 346 T
(e:) 197.21 346 T
2 F
(gcc my_sour) 72 320 T
(ce) 132.54 320 T
(.c gr) 143.02 320 T
(aphics.c -o e) 164.83 320 T
(xe_name -lX11 -lm) 225.58 320 T
0 F
0.49 (Before an) 72 294 P
0.49 (y graphics can be dra) 119.29 294 P
0.49 (wn, your program must call init_graphics to set up the X display) 223.05 294 P
0.49 (.) 537 294 P
-0.22 (Ne) 72 280 P
-0.22 (xt you should call init_w) 85.81 280 P
-0.22 (orld to set up the coordinate system your program desires \050you specify) 204.15 280 P
0.7 (which coordinates correspond to the upper left and lo) 72 266 P
0.7 (wer right corners of the screen\051. There are) 333.22 266 P
0 (then tw) 72 252 P
0 (o w) 107.55 252 P
0 (ays in which you can use this graphics package, interacti) 125.1 252 P
0 (v) 396.78 252 P
0 (ely or non-interacti) 402.6 252 P
0 (v) 494.29 252 P
0 (ely) 500.11 252 P
0 (. Run) 513.99 252 P
-0.09 (the e) 72 238 P
-0.09 (xample program \050graphics\051 to see ho) 94.72 238 P
-0.09 (w the) 270.27 238 P
-0.09 (y look to the user) 296.33 238 P
-0.09 (. \050T) 378.64 238 P
-0.09 (o create the e) 394.92 238 P
-0.09 (xample program,) 458.11 238 P
1.47 (edit mak) 72 224 P
1.47 (e\336le to set the library paths, etc. to the appropriate v) 115.01 224 P
1.47 (alues for your system, then type) 379.35 224 P
(mak) 72 210 T
(e\051.) 92.54 210 T
1 14 Q
(Interacti) 72 176.67 T
(v) 123.95 176.67 T
(e Graphics) 130.81 176.67 T
0 12 Q
0.61 (In this mode, your graphics will be dra) 72 150 P
0.61 (wn and the user can use on-screen arro) 262.07 150 P
0.61 (w) 452.3 150 P
0.61 (, zoom and win-) 460.18 150 P
0.12 (do) 72 136 P
0.12 (w controls to focus on the areas of greatest interest. T) 83.7 136 P
0.12 (o use this mode, your program must ha) 340.91 136 P
0.12 (v) 528.85 136 P
0.12 (e) 534.67 136 P
0.83 (a routine which can redra) 72 122 P
0.83 (w the entire picture. This routine should not set the w) 197.08 122 P
0.83 (orld coordinates) 461.52 122 P
0.38 (\050no calls to init_w) 72 108 P
0.38 (orld\051, since the graphics package changes the w) 160.02 108 P
0.38 (orld coordinates in response to) 391.17 108 P
0.65 (the user clicking on the pan and zoom b) 72 94 P
0.65 (uttons. This routine al) 268.26 94 P
0.65 (w) 375.42 94 P
0.65 (ays dra) 383.97 94 P
0.65 (ws the entire picture; the) 418.76 94 P
0.52 (graphics package translates the points speci\336ed by you to the screen so that the vie) 72 80 P
0.52 (w is properly) 475.63 80 P
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(EasyGL \050V) 72 42.62 T
(ersion 1.4\051) 107.77 42.62 T
(April 16, 1998) 282.56 42.62 T
(2 of 6) 521.34 42.62 T
0 12 Q
1.18 (zoomed and panned. The graphics are made interacti) 72 712 P
1.18 (v) 333.24 712 P
1.18 (e by calling the e) 339.06 712 P
1.18 (v) 425.48 712 P
1.18 (ent_loop routine. This) 431.3 712 P
0.2 (routine simply responds to user input and monitors the windo) 72 698 P
0.2 (w state, calling your redra) 368.53 698 P
0.2 (w routine) 494.14 698 P
0.63 (to redra) 72 684 P
0.63 (w the picture as necessary) 109.44 684 P
0.63 (. When the user clicks on the proceed b) 236.49 684 P
0.63 (utton, control e) 430.28 684 P
0.63 (xits the) 504.36 684 P
1.15 (e) 72 670 P
1.15 (v) 77.03 670 P
1.15 (ent_loop procedure and returns to your program. If you return from the e) 82.85 670 P
1.15 (v) 445.89 670 P
1.15 (ent_loop and then) 451.71 670 P
0.11 (wish to call it ag) 72 656 P
0.11 (ain later) 151.7 656 P
0.11 (, you may w) 190.32 656 P
0.11 (ant to \336rst call init_w) 249.85 656 P
0.11 (orld to set the w) 352.84 656 P
0.11 (orld coordinates \050since) 430.48 656 P
1.05 (the user\325) 72 642 P
1.05 (s panning and zooming may ha) 114.04 642 P
1.05 (v) 268.7 642 P
1.05 (e changed them\051 and then call your redra) 274.52 642 P
1.05 (wing routine) 477.95 642 P
0.26 (\050since the on-screen picture may be dif) 72 628 P
0.26 (ferent from your ne) 259.85 628 P
0.26 (w picture, and e) 353.96 628 P
0.26 (v) 431.07 628 P
0.26 (ent_loop will not call) 436.89 628 P
(your dra) 72 614 T
(wing routine until the user does something\051.) 112.14 614 T
(The b) 72 588 T
(uttons sho) 99.42 588 T
(wn on-screen in this mode are:) 148.13 588 T
2 F
(Arr) 72 562 T
(ow k) 88.13 562 T
(e) 110.34 562 T
(ys:) 115.31 562 T
0 F
( P) 129.3 562 T
(an half a windo) 138.79 562 T
(w width or height in the speci\336ed direction.) 212.81 562 T
2 F
0.75 (Zoom In and Zoom Out:) 72 536 P
0 F
0.75 (Blo) 195.41 536 P
0.75 (w up the vie) 212.45 536 P
0.75 (w to 5/3 or reduce it to 3/5 of its original size, respec-) 273.39 536 P
(ti) 72 522 T
(v) 78.37 522 T
(ely) 84.19 522 T
(.) 98.08 522 T
2 F
-0.19 (Zoom F) 72 496 P
-0.19 (it:) 108.93 496 P
0 F
-0.19 ( Zooms all the w) 119.6 496 P
-0.19 (ay out so all your graphics \336t into the display area. \050Returns the vie) 199.37 496 P
-0.19 (w to) 519.19 496 P
(the full coordinate range speci\336ed by the last call to init_w) 72 482 T
(orld.\051) 353.84 482 T
2 F
0.23 (W) 72 456 P
0.23 (indow:) 81.34 456 P
0 F
0.23 ( After clicking on this b) 114.67 456 P
0.23 (utton, you can dra) 229.91 456 P
0.23 (w a box in the graphics area by clicking on its) 317.07 456 P
0.65 (diagonally opposite corners. The program will zoom in on this box \050while preserving the aspect) 72 442 P
(ratio\051.) 72 428 T
2 F
0.28 (P) 72 402 P
0.28 (ostScript:) 78.37 402 P
0 F
0.28 ( This will create a PostScript \336le that corresponds e) 125.04 402 P
0.28 (xactly to the display you currently) 374.31 402 P
0.63 (ha) 72 388 P
0.63 (v) 83.09 388 P
0.63 (e on screen. The \336rst time you click on this b) 88.91 388 P
0.63 (utton it creates a \336le called pic1.ps; the second) 311.31 388 P
(time it creates pic2.ps and so on.) 72 374 T
2 F
0.97 (Pr) 72 348 P
0.97 (oceed:) 83.46 348 P
0 F
0.97 (Return to the calling routine \050allo) 119.41 348 P
0.97 (ws the main program to compute some more and/or) 284.28 348 P
(dra) 72 334 T
(w a dif) 87.14 334 T
(ferent picture\051.) 120.17 334 T
2 F
(Exit:) 72 308 T
0 F
( Abort the program.) 95.33 308 T
-0.29 (Ev) 72 282 P
-0.29 (ent_loop is called with tw) 85.15 282 P
-0.29 (o parameters. The \336rst parameter is a pointer to a function that will be) 207.86 282 P
-0.2 (called whene) 72 268 P
-0.2 (v) 134.48 268 P
-0.2 (er the user clicks on some point in the dra) 140.3 268 P
-0.2 (wing area \050b) 338.66 268 P
-0.2 (utton clicks in the menu areas) 398 268 P
-0.02 (are handled entirely by the graphics package\051. Whene) 72 254 P
-0.02 (v) 329.47 254 P
-0.02 (er the user clicks a b) 335.29 254 P
-0.02 (utton within the dra) 433.25 254 P
-0.02 (w-) 527.34 254 P
-0.1 (ing area the function you passed to e) 72 240 P
-0.1 (v) 246.6 240 P
-0.1 (ent_loop is called and is passed the coordinates at which the) 252.42 240 P
0.66 (user click) 72 226 P
0.66 (ed. This allo) 118.86 226 P
0.66 (ws you to respond to user mouse clicks, perhaps by changing the color of) 179.53 226 P
0.36 (the object the) 72 212 P
0.36 (y click) 137.2 212 P
0.36 (ed on, etc. If you ha) 169.76 212 P
0.36 (v) 266.96 212 P
0.36 (e no need to respond to mouse clicks on your graphics,) 272.78 212 P
(simply create a dummy function that does nothing and pass this to e) 72 198 T
(v) 397.68 198 T
(ent_loop.) 403.5 198 T
(The second parameter is a pointer to your screen redra) 72 172 T
(wing function.) 332.74 172 T
1 14 Q
(Message Ar) 72 138.67 T
(ea) 142.11 138.67 T
0 12 Q
0.1 (There is small subwindo) 72 112 P
0.1 (w at the bottom of the main windo) 189.65 112 P
0.1 (w which displays a single line of mes-) 355.68 112 P
0.36 (sage te) 72 98 P
0.36 (xt. This te) 105.17 98 P
0.36 (xt is changed by calling update_message \050char *msg\051. This message will not be) 154.05 98 P
0.62 (changed in size as the user zooms in and out or pans the graphics, so it is useful for status mes-) 72 84 P
(sages.) 72 70 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(EasyGL \050V) 72 42.62 T
(ersion 1.4\051) 107.77 42.62 T
(April 16, 1998) 282.56 42.62 T
(3 of 6) 521.34 42.62 T
1 14 Q
(Non-Interacti) 72 710.67 T
(v) 153.51 710.67 T
(e Graphics) 160.37 710.67 T
0 12 Q
-0.14 (In order to use the interacti) 72 684 P
-0.14 (v) 200.64 684 P
-0.14 (e graphics, your program must be capable of redra) 206.46 684 P
-0.14 (wing the entire pic-) 446.77 684 P
0.98 (ture it w) 72 670 P
0.98 (ants displayed. If this is impossible or incon) 113.83 670 P
0.98 (v) 331.53 670 P
0.98 (enient, you can simply dra) 337.35 670 P
0.98 (w the graphics) 468.06 670 P
3.34 (piecemeal and call \337ushinput to ensure the X11 serv) 72 656 P
3.34 (er dra) 349.83 656 P
3.34 (ws them. Y) 380.64 656 P
3.34 (ou must call either) 440.99 656 P
0.74 (e) 72 642 P
0.74 (v) 77.03 642 P
0.74 (ent_loop or \337ushinput in order for your graphics to be displayed; otherwise the X serv) 82.85 642 P
0.74 (er may) 506.27 642 P
0.1 (b) 72 628 P
0.1 (uf) 77.76 628 P
0.1 (fer them fore) 87.46 628 P
0.1 (v) 149.99 628 P
0.1 (er) 155.81 628 P
0.1 (. The b) 164.48 628 P
0.1 (uttons on the right side of the windo) 198.1 628 P
0.1 (w that normally allo) 372.15 628 P
0.1 (w panning and) 469.15 628 P
(zooming will be gre) 72 614 T
(yed out to sho) 168.14 614 T
(w that the) 235.51 614 T
(y are not selectable.) 282.66 614 T
0.2 (T) 72 588 P
0.2 (o create PostScript output in non-interacti) 78.37 588 P
0.2 (v) 279.41 588 P
0.2 (e mode, simply call init_postscript, mak) 285.23 588 P
0.2 (e your dra) 478.46 588 P
0.2 (w-) 527.34 588 P
0.66 (ing calls normally) 72 574 P
0.66 (, and then call close_postscript when you are done to close the output \336le and) 159.2 574 P
(redirect graphics to the screen.) 72 560 T
1 14 Q
(Compiling on Machines without X W) 72 526.67 T
(indo) 294.6 526.67 T
(ws) 320.92 526.67 T
0 12 Q
0.06 (What happens if you incorporate graphics throughout your program and then decide you\325) 72 500 P
0.06 (d lik) 500.67 500 P
0.06 (e to) 522.28 500 P
0.14 (run the program on a system that doesn\325) 72 486 P
0.14 (t support X W) 265.72 486 P
0.14 (indo) 333.98 486 P
0.14 (ws \050e.g. W) 355.02 486 P
0.14 (indo) 406.8 486 P
0.14 (ws NT\051. Don\325) 427.83 486 P
0.14 (t despair!) 494.87 486 P
0.7 (Uncomment the line \322#de\336ne NO_GRAPHICS\323 at the top of graphics.c and all the X W) 72 472 P
0.7 (indo) 505.63 472 P
0.7 (ws) 526.67 472 P
0.16 (calls will be ripped out by the C preprocessor) 72 458 P
0.16 (. Y) 290.57 458 P
0.16 (ou\325) 304.07 458 P
0.16 (ll be able to compile your program and run it,) 319.94 458 P
(b) 72 444 T
(ut of course, the graphics will all be disabled.) 77.76 444 T
1 16 Q
(Pr) 72 403.33 T
(ocedur) 88.59 403.33 T
(e Summary) 135.41 403.33 T
2 12 Q
0.25 (void init_gr) 72 376 P
0.25 (aphics \050c) 128.4 376 P
0.25 (har *window_name\051:) 172.12 376 P
0 F
0.25 ( Opens and initializes the X display) 275.37 376 P
0.25 (. Called once at the) 446.7 376 P
1.3 (be) 72 362 P
1.3 (ginning of a program, before an) 83.15 362 P
1.3 (y dra) 242.12 362 P
1.3 (wing occurs. The) 267.57 362 P
2 F
1.3 (window_name) 357.47 362 P
0 F
1.3 ( parameter will be dis-) 426.8 362 P
(played across the title bar of the windo) 72 348 T
(w) 258 348 T
(.) 265.88 348 T
2 F
1.09 (void close_gr) 72 322 P
1.09 (aphics \050void\051:) 137.9 322 P
0 F
1.09 ( Closes the X Display) 205.97 322 P
1.09 (. Should be called once at the end of the pro-) 314.19 322 P
(gram, after all dra) 72 308 T
(wing is \336nished.) 157.79 308 T
2 F
0.4 (void init_postscript \050c) 72 282 P
0.4 (har *fname\051:) 177.95 282 P
0 F
0.4 (Opens a \336le with the name) 244.73 282 P
2 F
0.4 (fname) 378.42 282 P
0 F
0.4 ( \050by con) 407.75 282 P
0.4 (v) 447.38 282 P
0.4 (ention you should) 453.2 282 P
2.69 (specify a name ending in .ps\051 and directs all graphics output to this PostScript \336le until a) 72 268 P
(close_postscript call is e) 72 254 T
(x) 188.81 254 T
(ecuted.) 194.63 254 T
2 F
3.61 (void close_postscript \050void\051:) 72 228 P
0 F
3.61 ( Properly terminates and closes the PostScript \336le created by) 216.54 228 P
(init_postscript, and sets the screen as the output de) 72 214 T
(vice for subsequent dra) 314.68 214 T
(wing commands.) 426.13 214 T
2 F
0.05 (void e) 72 188 P
0.05 (vent_loop \050void \050*act_on_b) 100.87 188 P
0.05 (utton\051 \050\337oat x, \337oat y\051, void \050*dr) 233.38 188 P
0.05 (awscr) 388.84 188 P
0.05 (een\051 \050void\051\051:) 417.07 188 P
0 F
0.05 (Redra) 480.47 188 P
0.05 (ws the) 508.95 188 P
-0.18 (windo) 72 174 P
-0.18 (w if it has been obscured and modi\336es the w) 101.7 174 P
-0.18 (orld-coordinates to allo) 313.57 174 P
-0.18 (w panning and zooming) 424.89 174 P
0.55 (in response to user input. This routine is passed tw) 72 160 P
0.55 (o \322callback\323 functions. The dra) 319.5 160 P
0.55 (wscreen func-) 471.82 160 P
0.85 (tion must redra) 72 146 P
0.85 (w the entire picture when called. The act_on_b) 146.17 146 P
0.85 (utton function is called whene) 377.13 146 P
0.85 (v) 524.86 146 P
0.85 (er) 530.68 146 P
0.29 (the user clicks on the dra) 72 132 P
0.29 (wing area. This allo) 192.91 132 P
0.29 (ws the \322callback\323 function you ha) 288.8 132 P
0.29 (v) 452.98 132 P
0.29 (e de\336ned to look) 458.8 132 P
(at the x and y coordinates at which the user click) 72 118 T
(ed, and tak) 305.83 118 T
(e some appropriate action.) 358.03 118 T
2 F
0.12 (void dr) 72 92 P
0.12 (awscr) 106.27 92 P
0.12 (een \050void\051:) 134.49 92 P
0 F
0.12 ( A user) 186.92 92 P
0.12 (-supplied routine that redra) 221.57 92 P
0.12 (ws the entire picture. This must e) 352.04 92 P
0.12 (xist if) 512.21 92 P
-0.13 (the interacti) 72 78 P
-0.13 (v) 128.56 78 P
-0.13 (e graphics are to be used \050and you need a dummy routine to k) 134.38 78 P
-0.13 (eep the compiler happ) 428.2 78 P
-0.13 (y) 534 78 P
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(EasyGL \050V) 72 42.62 T
(ersion 1.4\051) 107.77 42.62 T
(April 16, 1998) 282.56 42.62 T
(4 of 6) 521.34 42.62 T
0 12 Q
2.01 (e) 72 712 P
2.01 (v) 77.03 712 P
2.01 (en if you don\325) 82.85 712 P
2.01 (t use the interacti) 156.31 712 P
2.01 (v) 244.36 712 P
2.01 (e graphics\051. The \336rst line of dra) 250.18 712 P
2.01 (wscreen should be) 413.68 712 P
2 F
2.01 (clear-) 511.34 712 P
(scr) 72 698 T
(een\050\051) 86.22 698 T
0 F
( to erase the old graphics from the windo) 110.87 698 T
(w) 307.2 698 T
(.) 315.08 698 T
2 F
0.9 (void update_messa) 72 672 P
0.9 (g) 164.44 672 P
0.9 (e \050c) 170.32 672 P
0.9 (har *msg\051:) 188.69 672 P
0 F
0.9 (Sets the message to be displayed in the message area to the) 246.48 672 P
(string pointed to by msg.) 72 658 T
2 F
0.16 (void init_world \050\337oat xleft, \337oat ytop, \337oat xright, \337oat ybottom\051:) 72 632 P
0 F
0.16 ( Speci\336es the w) 386.15 632 P
0.16 (orld coordinates) 462.18 632 P
1.93 (used for dra) 72 618 P
1.93 (wing. The four numbers de\336ne the coordinates of the edges of the windo) 133 618 P
1.93 (w) 504.84 618 P
1.93 (. Y) 512.72 618 P
1.93 (ou) 528 618 P
1.57 (should al) 72 604 P
1.57 (w) 117.11 604 P
1.57 (ays call init_w) 125.66 604 P
1.57 (orld before e) 198.66 604 P
1.57 (v) 262.8 604 P
1.57 (ent_loop \050since pre) 268.62 604 P
1.57 (vious calls of e) 363.43 604 P
1.57 (v) 440.15 604 P
1.57 (ent_loop may ha) 445.97 604 P
1.57 (v) 528.85 604 P
1.57 (e) 534.67 604 P
1.11 (changed the w) 72 590 P
1.11 (orld coordinates in response to the user\325) 143.41 590 P
1.11 (s panning and zooming\051 and you should) 341.36 590 P
0.24 (ne) 72 576 P
0.24 (v) 83.03 576 P
0.24 (er call init_w) 88.85 576 P
0.24 (orld in dra) 152.52 576 P
0.24 (wscreen \050since this w) 202.81 576 P
0.24 (ould disable the user\325) 306.37 576 P
0.24 (s panning and zooming\051. If) 409.4 576 P
0.97 (necessary) 72 562 P
0.97 (, the graphics package will increase either the v) 117.86 562 P
0.97 (ertical or horizontal span of the w) 353.02 562 P
0.97 (orld) 520.67 562 P
1.28 (coordinates to mak) 72 548 P
1.28 (e sure the aspect ratio is preserv) 165.77 548 P
1.28 (ed \050i.e. 1 v) 326.59 548 P
1.28 (ertical unit displays as the same) 381.26 548 P
(length as 1 horizontal unit\051.) 72 534 T
2 F
1.29 (void \337ushinput \050void\051:) 72 508 P
0 F
1.29 ( F) 181.23 508 P
1.29 (orces pre) 192.01 508 P
1.29 (vious dra) 236.63 508 P
1.29 (wing commands to be displayed, and empties the X) 282.07 508 P
0.19 (e) 72 494 P
0.19 (v) 77.03 494 P
0.19 (ent queue. Only needed during non-interacti) 82.85 494 P
0.19 (v) 295.44 494 P
0.19 (e dra) 301.26 494 P
0.19 (wing, as e) 324.92 494 P
0.19 (v) 373.31 494 P
0.19 (ent_loop automatically forces the) 379.13 494 P
(X serv) 72 480 T
(er to update the display) 103.48 480 T
(.) 214.68 480 T
2 F
1.32 (void setcolor \050enum cinde) 72 454 P
1.32 (x\051:) 200.03 454 P
0 F
1.32 ( Sets the color for subsequent dra) 213.35 454 P
1.32 (wing commands. The colors are) 381.08 454 P
-0.22 (speci\336ed by enumerated constants, so the) 72 440 P
-0.22 (y must al) 269.36 440 P
-0.22 (w) 312.81 440 P
-0.22 (ays be in upper case. The colors a) 321.36 440 P
-0.22 (v) 481.54 440 P
-0.22 (ailable are:) 487.24 440 P
3.68 (WHITE, BLA) 72 426 P
3.68 (CK, LIGHTGREY) 143.85 426 P
3.68 (, D) 237.3 426 P
3.68 (ARKGREY) 255.16 426 P
3.68 (, RED, YELLO) 311.61 426 P
3.68 (W) 393.86 426 P
3.68 (, GREEN, BLUE, CY) 404.09 426 P
3.68 (AN,) 519.67 426 P
0.58 (D) 72 412 P
0.58 (ARKGREEN, and MA) 80.18 412 P
0.58 (GENT) 191.86 412 P
0.58 (A. On black and white displays you should use only the BLA) 222.74 412 P
0.58 (CK) 523.33 412 P
1.01 (and WHITE colors -- if you specify other colors the X serv) 72 398 P
1.01 (er will map them to either black or) 366.58 398 P
(white. Def) 72 384 T
(ault: BLA) 122.53 384 T
(CK.) 170.39 384 T
2 F
1.37 (void setlinestyle \050enum linestyle\051:) 72 358 P
0 F
1.37 ( Sets the linestyle used by subsequent dra) 237.08 358 P
1.37 (wline and dra) 445.47 358 P
1.37 (wrect) 513.35 358 P
(calls. The choices a) 72 344 T
(v) 165.73 344 T
(ailable are SOLID or D) 171.43 344 T
(ASHED. Def) 283.58 344 T
(ault: SOLID.) 347.45 344 T
2 F
2.49 (void setline) 72 318 P
2.49 (width \050int line) 129.31 318 P
2.49 (width\051:) 201.46 318 P
0 F
2.49 ( Sets the width of lines dra) 236.13 318 P
2.49 (wn by subsequent dra) 378.9 318 P
2.49 (wline and) 490.51 318 P
0.47 (dra) 72 304 P
0.47 (wrect calls, in pix) 87.14 304 P
0.47 (els. A width of zero requests the thinnest line \0501 pix) 173.68 304 P
0.47 (el wide\051 that the de) 426.46 304 P
0.47 (vice) 520.01 304 P
0.18 (can dra) 72 290 P
0.18 (w) 106.98 290 P
2 F
0.18 (and) 118.83 290 P
0 F
0.18 ( indicates that lines can be dra) 136.83 290 P
0.18 (wn using a f) 282.37 290 P
0.18 (ast \050and slightly less accurate\051 algorithm.) 341.79 290 P
(Def) 72 276 T
(ault: 0.) 89.87 276 T
2 F
0.98 (void setfontsize \050int point_size\051:) 72 250 P
0 F
0.98 (Sets the font size used by subsequent dra) 231.92 250 P
0.98 (wte) 434.9 250 P
0.98 (xt calls, in points.) 452.05 250 P
(Def) 72 236 T
(ault: 10.) 89.87 236 T
2 F
-0.24 (void dr) 72 210 P
-0.24 (awline \050\337oat x1, \337oat y1, \337oat x2, \337oat y2\051:) 105.91 210 P
0 F
-0.24 (Dra) 314.41 210 P
-0.24 (w a line connecting \050) 332.21 210 P
2 F
-0.24 (x1, y1) 431.9 210 P
0 F
-0.24 (\051 to \050) 460.32 210 P
2 F
-0.24 (x2, y2) 483.17 210 P
0 F
-0.24 (\051. The) 511.58 210 P
(on-screen location of these points is determined by the current w) 72 196 T
(orld coordinates.) 382.49 196 T
2 F
-0.01 (void dr) 72 170 P
-0.01 (awr) 106.14 170 P
-0.01 (ect \050\337oat x1, \337oat y1, \337oat x2, \337oat y2\051:) 124.37 170 P
0 F
-0.01 (Dra) 316.95 170 P
-0.01 (ws the outline of a rectangle with the diag-) 334.76 170 P
(onally-opposed corners speci\336ed by \050) 72 156 T
2 F
(x1, y1) 251.96 156 T
0 F
(\051 and \050) 280.62 156 T
2 F
(x2, y2) 311.94 156 T
0 F
(\051, in w) 340.6 156 T
(orld coordinates.) 371.47 156 T
2 F
-0.19 (void dr) 72 130 P
-0.19 (awar) 105.97 130 P
-0.19 (c \050\337oat xcen, \337oat ycen, \337oat r) 130.19 130 P
-0.19 (ad, \337oat startang) 274.87 130 P
-0.19 (, \337oat ang) 356.72 130 P
-0.19 (e) 404.57 130 P
-0.19 (xtent\051:) 409.65 130 P
0 F
-0.19 ( Dra) 440.97 130 P
-0.19 (ws a circular arc) 461.6 130 P
0.65 (centered at \050) 72 116 P
2 F
0.65 (xcen, ycen) 132.6 116 P
0 F
0.65 (\051 with radius) 183.21 116 P
2 F
0.65 (r) 248.82 116 P
0.65 (ad) 253.3 116 P
0 F
0.65 ( \050all in w) 265.3 116 P
0.65 (orld coordinates\051.) 310.12 116 P
2 F
0.65 (Startang) 399.06 116 P
0 F
0.65 ( speci\336es the staring) 440.4 116 P
0.93 (angle of the arc, and) 72 102 P
2 F
0.93 (ang) 177.27 102 P
0.93 (e) 195.15 102 P
0.93 (xtent) 200.24 102 P
0 F
0.93 (is the angle swept out from the be) 227.49 102 P
0.93 (ginning to the end of the arc.) 396.12 102 P
1.32 (Both angles are speci\336ed in de) 72 88 P
1.32 (grees.) 225.42 88 P
2 F
1.32 (Startang) 258.06 88 P
0 F
1.32 ( is speci\336ed relati) 299.4 88 P
1.32 (v) 387.4 88 P
1.32 (e to the positi) 393.22 88 P
1.32 (v) 461.89 88 P
1.32 (e x-axis of the) 467.71 88 P
0.3 (screen \050a horizontal line from the center of the screen to its right side\051 and increases in the coun-) 72 74 P
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(EasyGL \050V) 72 42.62 T
(ersion 1.4\051) 107.77 42.62 T
(April 16, 1998) 282.56 42.62 T
(5 of 6) 521.34 42.62 T
0 12 Q
1.43 (terclockwise direction. Lik) 72 712 P
1.43 (e) 203.71 712 P
1.43 (wise a positi) 208.74 712 P
1.43 (v) 271.29 712 P
1.43 (e) 277.11 712 P
2 F
1.43 (ang) 286.87 712 P
1.43 (e) 304.75 712 P
1.43 (xtent) 309.83 712 P
0 F
1.43 (speci\336es a counterclockwise arc, while a) 337.59 712 P
(ne) 72 698 T
(g) 83.15 698 T
(ati) 89.09 698 T
(v) 100.79 698 T
(e) 106.61 698 T
2 F
(ang) 114.94 698 T
(e) 132.82 698 T
(xtent) 137.9 698 T
0 F
( describes a clockwise arc.) 161.23 698 T
2 F
0.91 (void \336llar) 72 672 P
0.91 (c \050\337oat xcen, \337oat ycen, \337oat r) 119.47 672 P
0.91 (ad, \337oat startang) 270.73 672 P
0.91 (, \337oat ang) 354.77 672 P
0.91 (e) 404.81 672 P
0.91 (xtent\051:) 409.9 672 P
0 F
0.91 ( Fills a circular se) 441.22 672 P
0.91 (g-) 530 672 P
1.7 (ment \050pie shape\051 centered at) 72 658 P
2 F
1.7 (\050xcen, ycen\051) 218.76 658 P
0 F
1.7 ( with radius) 278.42 658 P
2 F
1.7 (r) 343.17 658 P
1.7 (ad) 347.66 658 P
0 F
1.7 ( \050all in w) 359.66 658 P
1.7 (orld coordinates\051.) 407.62 658 P
2 F
1.7 (Startang) 498.66 658 P
0 F
0.27 (speci\336es the starting angle of the circular se) 72 644 P
0.27 (gment, and) 283.98 644 P
2 F
0.27 (ang) 340.85 644 P
0.27 (e) 358.73 644 P
0.27 (xtent) 363.81 644 P
0 F
0.27 ( is the angle swept out from the) 387.14 644 P
0.52 (be) 72 630 P
0.52 (ginning to the end of the circular se) 83.15 630 P
0.52 (gment. Both angles are in de) 256.89 630 P
0.52 (grees. See dra) 396.62 630 P
0.52 (w) 464.45 630 P
0.52 (arc for details) 472.99 630 P
(on the coordinate system assumed by startang and ange) 72 616 T
(xtent.) 337.78 616 T
2 F
-0.04 (void \336llr) 72 590 P
-0.04 (ect \050\337oat x1, \337oat y1, \337oat x2, \337oat y2\051:) 112.52 590 P
0 F
-0.04 (Dra) 304.82 590 P
-0.04 (ws the \336lled rectangle speci\336ed by the diago-) 322.63 590 P
(nally-opposed \050) 72 576 T
2 F
(x1, y1) 146.99 576 T
0 F
(\051 and \050) 175.64 576 T
2 F
(x2, y2) 206.96 576 T
0 F
(\051 corners in w) 235.62 576 T
(orld coordinates.) 301.81 576 T
2 F
1.81 (void \336llpoly \050s_point *points, int npoints\051:) 72 550 P
0 F
1.81 ( Fills in the polygon speci\336ed. The s_point type is) 283.72 550 P
0.21 (de\336ned to be) 72 536 P
2 F
0.21 (struct {\337oat x; \337oat y;},) 137.62 536 P
0 F
0.21 (so the points array speci\336es the outline of the polygon, and) 254.93 536 P
2 F
1.41 (npoints) 72 522 P
0 F
1.41 ( indicates the number of points making up the polygon boundary) 107.34 522 P
1.41 (. These points will be) 431.35 522 P
0.2 (connected with straight lines; the last point will be connected to the \336rst point to close the \336gure,) 72 508 P
0.38 (and it will be \336lled. The) 72 494 P
2 F
0.38 (MAXPTS) 192.63 494 P
0 F
0.38 (de\336ned constant in graphics.h determines the maximum num-) 240.68 494 P
-0.11 (ber of points allo) 72 480 P
-0.11 (wed in the points array and is currently set to 100. If you need to dra) 153.02 480 P
-0.11 (w v) 479.76 480 P
-0.11 (ery com-) 497.13 480 P
(ple) 72 466 T
(x polygons with o) 86.48 466 T
(v) 172.64 466 T
(er 100 boundary points, increase this number) 178.46 466 T
(.) 394.1 466 T
2 F
1.53 (void dr) 72 440 P
1.53 (awte) 107.69 440 P
1.53 (xt \050\337oat xcen, \337oat ycen, c) 130.11 440 P
1.53 (har *te) 263.23 440 P
1.53 (xt, \337oat boundx\051:) 298.86 440 P
0 F
1.53 ( Dra) 384.25 440 P
1.53 (ws the null-terminated te) 406.59 440 P
1.53 (xt) 530.66 440 P
-0.13 (string pointed to by) 72 426 P
2 F
-0.13 (*te) 168.16 426 P
-0.13 (xt) 182.58 426 P
0 F
-0.13 ( centered at \050) 191.25 426 P
2 F
-0.13 (xcen, ycen) 253.16 426 P
0 F
-0.13 (\051 in w) 303 426 P
-0.13 (orld coordinates. The te) 330.62 426 P
-0.13 (xt will not be dra) 444.03 426 P
-0.13 (wn) 525.34 426 P
-0.17 (if it will be more than) 72 412 P
2 F
-0.17 (boundx) 178.32 412 P
0 F
-0.17 (units \050w) 216.48 412 P
-0.17 (orld coordinates\051 from its left to its right side. This pre) 255.19 412 P
-0.17 (v) 514.85 412 P
-0.17 (ents) 520.67 412 P
0.62 (te) 72 398 P
0.62 (xt messages from being dra) 80.48 398 P
0.62 (wn when the picture is v) 214.75 398 P
0.62 (ery zoomed-out if the) 335.3 398 P
0.62 (y w) 440.61 398 P
0.62 (ould obscure too) 458.77 398 P
0.46 (much detail. If you w) 72 384 P
0.46 (ant the te) 176.71 384 P
0.46 (xt displayed no matter ho) 221.45 384 P
0.46 (w f) 344.99 384 P
0.46 (ar the user zooms out, specify a v) 360.99 384 P
0.46 (ery) 524.67 384 P
(lar) 72 370 T
(ge) 84.44 370 T
2 F
(boundx) 98.77 370 T
0 F
( \050e.g. 1.e10\051.) 134.1 370 T
2 F
1.54 (void clear) 72 344 P
1.54 (scr) 121.74 344 P
1.54 (een \050void\051:) 135.96 344 P
0 F
1.54 ( Clears the graphics windo) 189.8 344 P
1.54 (w or PostScript page \050erases all the current) 323.63 344 P
(geometry\051.) 72 330 T
0.36 (The follo) 72 304 P
0.36 (wing tw) 116.39 304 P
0.36 (o functions are used only if you w) 155.63 304 P
0.36 (ant to create ne) 321.68 304 P
0.36 (w b) 395.43 304 P
0.36 (uttons in the menu area or) 413.22 304 P
0.01 (destro) 72 290 P
0.01 (y some of the e) 101.21 290 P
0.01 (xisting ones. If you\325) 174.4 290 P
0.01 (re happ) 270.49 290 P
0.01 (y with the b) 306.04 290 P
0.01 (uttons the graphics package pro) 362.83 290 P
0.01 (vides) 514.67 290 P
(by def) 72 276 T
(ault, you don\325) 102.2 276 T
(t need to e) 168.98 276 T
(v) 218.34 276 T
(er use these functions.) 224.16 276 T
2 F
0.01 (void cr) 72 250 P
0.01 (eate_b) 105.23 250 P
0.01 (utton \050c) 136.98 250 P
0.01 (har *pr) 173.8 250 P
0.01 (e) 209.71 250 P
0.01 (v_b) 214.86 250 P
0.01 (utton_te) 231.94 250 P
0.01 (xt, c) 271.04 250 P
0.01 (har *b) 290.86 250 P
0.01 (utton_te) 322.3 250 P
0.01 (xt, void \050*b) 361.4 250 P
0.01 (utton_func\051 \050void \050*dr) 415.5 250 P
0.01 (aw-) 522 250 P
1.46 (scr) 72 236 P
1.46 (een\051 \050void\051\051\051:) 86.22 236 P
0 F
1.46 (Creates a ne) 156.43 236 P
1.46 (w b) 217.69 236 P
1.46 (utton underneath the b) 236.57 236 P
1.46 (utton containing pre) 348.36 236 P
1.46 (v_b) 447.63 236 P
1.46 (utton_te) 465.39 236 P
1.46 (xt. The) 504.55 236 P
0.13 (te) 72 222 P
0.13 (xt on the b) 80.48 222 P
0.13 (utton is gi) 131.64 222 P
0.13 (v) 179.62 222 P
0.13 (en by b) 185.44 222 P
0.13 (utton_te) 220.79 222 P
0.13 (xt, and the function pointer passed to create b) 259.95 222 P
0.13 (utton will be) 479.06 222 P
1.25 (called whene) 72 208 P
1.25 (v) 135.93 208 P
1.25 (er the b) 141.74 208 P
1.25 (utton is pressed. This callback function tak) 179.99 208 P
1.25 (es one ar) 393.01 208 P
1.25 (gument -- a function) 437.94 208 P
(pointer which points at the screen redra) 72 194 T
(wing function.) 261.11 194 T
2 F
0.96 (void destr) 72 168 P
0.96 (oy_b) 120.09 168 P
0.96 (utton \050c) 143.17 168 P
0.96 (har *b) 180.95 168 P
0.96 (utton_te) 213.34 168 P
0.96 (xt\051:) 252.44 168 P
0 F
0.96 (Destro) 273.06 168 P
0.96 (ys the b) 304.93 168 P
0.96 (utton with the speci\336ed b) 343.95 168 P
0.96 (utton_te) 468.89 168 P
0.96 (xt \050i.e.) 508.04 168 P
(name\051.) 72 154 T
1 16 Q
(Updates) 72 113.33 T
0 12 Q
0.41 (I add ne) 72 86 P
0.41 (w features to my graphics package as I need them. Periodically I will update the \336les on) 111.17 86 P
0.74 (my web page to mak) 72 72 P
0.74 (e these enhancements a) 174.81 72 P
0.74 (v) 289.08 72 P
0.74 (ailable to e) 294.78 72 P
0.74 (v) 348.61 72 P
0.74 (erybody) 354.43 72 P
0.74 (. If you w) 392.98 72 P
0.74 (ant me to email you) 441.72 72 P
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(EasyGL \050V) 72 42.62 T
(ersion 1.4\051) 107.77 42.62 T
(April 16, 1998) 282.56 42.62 T
(6 of 6) 521.34 42.62 T
0 12 Q
1.56 (when ne) 72 712 P
1.56 (w updates are a) 113.58 712 P
1.56 (v) 192.32 712 P
1.56 (ailable send an email to v) 198.02 712 P
1.56 (aughn@eecg.utoronto.ca. An) 327.84 712 P
1.56 (y feedback on) 469.57 712 P
(your e) 72 698 T
(xperience with this code is also v) 102.14 698 T
(ery welcome!) 261.28 698 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 6
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Times-Italic
%%EOF
